"use client";

import { useState } from "react";
import Header from "../../components/Header";
import Card, {
  CardHeader,
  CardTitle,
  CardContent,
} from "../../components/Card";
import Table from "@/components/Table";
import Button from "@/components/Button";
import Modal from "@/components/Modal";
import Input from "@/components/Input";
import Toast from "@/components/Toast";
import LoadingSpinner from "@/components/LoadingSpinner";
import ConfirmDialog from "@/components/ConfirmDialog";
import { useUsers } from "@/hooks/useUsers";

export default function UsersPage() {
  console.log("üöÄ [UsersPage] Component rendering...");
  const { users, loading, error, createUsers, updateUsers, deleteUsers } =
    useUsers();
  console.log("üöÄ [UsersPage] Hook result:", { users, loading, error });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [userToDelete, setUserToDelete] = useState(null);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Form
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    fName: "",
    lName: "",
    address: "",
    phoneNum: "",
    isActive: false,
  });

  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Toast
  const [toast, setToast] = useState({
    show: false,
    message: "",
    type: "info",
  });

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const usersData =
    users && Array.isArray(users) && users.length > 0
      ? users.map((user) => ({
          id: user._id || "",
          email: user.email || "",
          fname: user.fName || "",
          lname: user.lName || "",
          address: user.address || "-",
          phoneNumber: user.phoneNum || "",
          createAt: user.regisDate
            ? new Date(user.regisDate).toLocaleDateString("th-TH")
            : "",
          updateAt: user.updateDate
            ? new Date(user.updateDate).toLocaleDateString("th-TH")
            : "",
          status: user.isActive ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
          _originalData: user,
        }))
      : [];

  // ‡πÅ‡∏™‡∏î‡∏á Toast
  const showToast = (message, type = "info") => {
    setToast({ show: true, message, type });
    setTimeout(
      () => setToast({ show: false, message: "", type: "info" }),
      5000
    );
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Form
  const validateForm = (data) => {
    const errors = {};

    if (!data.email.trim()) {
      errors.email = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/\S+@\S+\.\S+/.test(data.email)) {
      errors.email = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    if (!editingUser && !data.password.trim()) {
      errors.password = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô";
    } else if (!editingUser && data.password.length < 6) {
      errors.password = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£";
    }

    if (!data.fName.trim()) {
      errors.fName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠";
    }

    if (!data.lName.trim()) {
      errors.lName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•";
    }

    if (!data.phoneNum.trim()) {
      errors.phoneNum = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå";
    } else if (!/^[0-9]{10}$/.test(data.phoneNum.replace(/[-\s]/g, ""))) {
      errors.phoneNum = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å";
    }

    return errors;
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Form
  const resetForm = () => {
    setFormData({
      email: "",
      password: "",
      fName: "",
      lName: "",
      address: "",
      phoneNum: "",
      isActive: true,
    });
    setFormErrors({});
    setEditingUser(null);
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
  const handleCreate = () => {
    resetForm();
    setIsModalOpen(true);
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç User
  const handleEdit = (user) => {
    console.log("üîß [UsersPage] Editing user:", user);
    const originalData = user._originalData;
    setEditingUser(originalData);
    setFormData({
      email: originalData.email || "",
      password: "", // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
      fName: originalData.fName || "",
      lName: originalData.lName || "",
      address: originalData.address || "",
      phoneNum: originalData.phoneNum || "",
      isActive: originalData.isActive,
    });
    setFormErrors({});
    setIsModalOpen(true);
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
  const handleDelete = (user) => {
    console.log("üóëÔ∏è [UsersPage] Preparing to delete user:", user);
    setUserToDelete(user._originalData);
    setIsDeleteModalOpen(true);
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
  const handleSubmit = async (e) => {
    e.preventDefault();

    const errors = validateForm(formData);
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    setIsSubmitting(true);
    setFormErrors({});

    try {
      const userData = {
        email: formData.email.trim(),
        fName: formData.fName.trim(),
        lName: formData.lName.trim(),
        address: formData.address.trim(),
        phoneNum: formData.phoneNum.trim(),
        isActive: formData.isActive,
        updateDate: new Date(),
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡πÉ‡∏´‡∏°‡πà
      if (!editingUser) {
        userData.passwordHash = formData.password; // Backend ‡∏à‡∏∞ hash ‡πÄ‡∏≠‡∏á
        userData.regisDate = new Date();
      }

      if (editingUser) {
        console.log("üîÑ [UsersPage] Updating user:", editingUser._id, userData);
        await updateUsers(editingUser._id, userData);
        showToast("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      } else {
        console.log("‚ûï [UsersPage] Creating new user:", userData);
        await createUsers(userData);
        showToast("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      }

      setIsModalOpen(false);
      resetForm();
    } catch (err) {
      console.error("‚ùå [UsersPage] Save error:", err);
      showToast(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "error");
    } finally {
      setIsSubmitting(false);
    }
  };

  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö User
  const confirmDelete = async () => {
    if (!userToDelete) return;

    try {
      console.log("üóëÔ∏è [UsersPage] Deleting user:", userToDelete._id);
      await deleteUsers(userToDelete._id);
      showToast("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      setIsDeleteModalOpen(false);
      setUserToDelete(null);
    } catch (err) {
      console.error("‚ùå [UsersPage] Delete error:", err);
      showToast(err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "error");
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô Form
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));

    // ‡∏•‡∏ö error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå
    if (formErrors[name]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  console.log("[Users] - usersData:", usersData);
  console.log("[Users] - loading:", loading);
  console.log("[Users] - error:", error);

  if (loading && !users) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</CardTitle>
              <Button
                onClick={handleCreate}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                <svg
                  className="w-5 h-5 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                  />
                </svg>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {error && (
              <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-800">‚ùå {error}</p>
              </div>
            )}

            {loading ? (
              <div className="flex justify-center py-8">
                <LoadingSpinner />
              </div>
            ) : (
              <Table
                data={usersData}
                autoColumns={false}
                columns={[
                  { key: "email", label: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" },
                  { key: "fname", label: "‡∏ä‡∏∑‡πà‡∏≠" },
                  { key: "lname", label: "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" },
                  { key: "phoneNumber", label: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" },
                  { key: "createAt", label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£" },
                  { key: "updateAt", label: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" },
                  { key: "status", label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" },
                ]}
                onEdit={handleEdit}
                onDelete={handleDelete}
                selectable={true}
                actions={true}
              />
            )}
          </CardContent>
        </Card>
      </main>

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç User */}
      <Modal
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
          resetForm();
        }}
        title={editingUser ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"}
        size="lg"
      >
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input
              label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange}
              error={formErrors.email}
              required
              placeholder="example@email.com"
            />

            {!editingUser && (
              <Input
                label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                name="password"
                type="password"
                value={formData.password}
                onChange={handleInputChange}
                error={formErrors.password}
                required
                placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
              />
            )}

            <Input
              label="‡∏ä‡∏∑‡πà‡∏≠"
              name="fName"
              value={formData.fName}
              onChange={handleInputChange}
              error={formErrors.fName}
              required
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
            />

            <Input
              label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
              name="lName"
              value={formData.lName}
              onChange={handleInputChange}
              error={formErrors.lName}
              required
              placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
            />

            <Input
              label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              name="phoneNum"
              value={formData.phoneNum}
              onChange={handleInputChange}
              error={formErrors.phoneNum}
              required
              placeholder="0812345678"
            />
          </div>

          <Input
            label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            name="address"
            value={formData.address}
            onChange={handleInputChange}
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
          />

          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              name="isActive"
              checked={formData.isActive}
              onChange={handleInputChange}
              className="mr-2"
            />
            <label
              htmlFor="isActive"
              className="text-sm font-medium text-gray-700"
            >
              ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            </label>
          </div>

          <div className="flex justify-end space-x-3 pt-4">
            <Button
              type="button"
              onClick={() => {
                setIsModalOpen(false);
                resetForm();
              }}
              variant="secondary"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              {isSubmitting ? (
                <>
                  <LoadingSpinner size="sm" className="mr-2" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </>
              ) : editingUser ? (
                "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó"
              ) : (
                "‡∏™‡∏£‡πâ‡∏≤‡∏á"
              )}
            </Button>
          </div>
        </form>
      </Modal>

      {/* Modal ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö */}
      <ConfirmDialog
        isOpen={isDeleteModalOpen}
        onClose={() => {
          setIsDeleteModalOpen(false);
          setUserToDelete(null);
        }}
        onConfirm={confirmDelete}
        title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
        message={
          userToDelete
            ? `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ "${userToDelete.fName} ${userToDelete.lName}" (${userToDelete.email})`
            : "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ"
        }
        confirmText="‡∏•‡∏ö"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        type="danger"
      />

      {/* Toast Notification */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.show}
        onClose={() => setToast({ show: false, message: "", type: "info" })}
      />
    </div>
  );
}
